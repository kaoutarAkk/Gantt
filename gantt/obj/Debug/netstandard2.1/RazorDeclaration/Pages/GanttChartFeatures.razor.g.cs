#pragma checksum "D:\test\gantt\gantt\Pages\GanttChartFeatures.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b8f1221af2b620db36f8fe75740a6dc1c13e2463"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace gantt.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\test\gantt\gantt\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\test\gantt\gantt\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\test\gantt\gantt\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\test\gantt\gantt\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\test\gantt\gantt\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\test\gantt\gantt\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\test\gantt\gantt\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\test\gantt\gantt\_Imports.razor"
using gantt;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\test\gantt\gantt\_Imports.razor"
using gantt.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\test\gantt\gantt\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\test\gantt\gantt\Pages\GanttChartFeatures.razor"
using Syncfusion.Blazor.Gantt;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/ganttchart-features")]
    public partial class GanttChartFeatures : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 52 "D:\test\gantt\gantt\Pages\GanttChartFeatures.razor"
      
    public DateTime ProjectStart = new DateTime(2020, 4, 1);
    public DateTime ProjectEnd = new DateTime(2020, 5, 4);
    public DateTime EventDay1 = new DateTime(2020, 4, 17);
    public DateTime HolidayFrom1 = new DateTime(2020, 4, 11);
    public DateTime HolidayTo1 = new DateTime(2020, 4, 12);
    public DateTime HolidayFrom2 = new DateTime(2020, 4, 1);
    public DateTime HolidayTo2 = new DateTime(2020, 4, 1);
    public List<TaskData> TaskCollection { get; set; }
    public int DefaultUnitWidth = 33;
    public int TopTierCount = 1;
    public int BottomTierCount = 1;
    TimelineViewMode TopTierUnit = TimelineViewMode.Week;
    TimelineViewMode BottomTierUnit = TimelineViewMode.Day;
    string TopTierFormat = "MMM dd, yyyy";
    string BottomTierFormat = "";
    public string[] Searchfields = new string[] { "TaskId", "TaskName", "StartDate", "EndDate", "Duration", "Progress", "Predecessor" };
    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
    }
    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public string Predecessor { get; set; }
        public List<TaskData> SubTasks { get; set; }
    }
    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {
        new TaskData() {
            TaskId = 1,
            TaskName = "Project initiation",
            StartDate = new DateTime(2020, 04, 02),
            EndDate = new DateTime(2020, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 2,
                    TaskName = "Identify Site location",
                    StartDate = new DateTime(2020, 04, 02),
                    Duration = "0",
                    Progress = 30
                },
                new TaskData() {
                    TaskId = 3,
                    TaskName = "Perform soil test",
                    StartDate = new DateTime(2020, 04, 02),
                    Duration = "4",
                    Predecessor = "2",
                },
                new TaskData() {
                    TaskId = 4,
                    TaskName = "Soil test approval",
                    StartDate = new DateTime(2020, 04, 02),
                    Duration = "0",
                    Progress = 30,
                    Predecessor = "3"
                },
            })
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Project estimation",
            StartDate = new DateTime(2020, 04, 02),
            EndDate = new DateTime(2020, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 6,
                    TaskName = "Develop floor plan for estimation",
                    StartDate = new DateTime(2020, 04, 04),
                    Duration = "3",
                    Progress = 30,
                    Predecessor = "4",
                },
                new TaskData() {
                    TaskId = 7,
                    TaskName = "List materials",
                    StartDate = new DateTime(2020, 04, 04),
                    Duration = "3",
                    Predecessor = "6",
                },
                new TaskData() {
                    TaskId = 8,
                    TaskName = "Estimation approval",
                    StartDate = new DateTime(2020, 04, 04),
                    Duration = "0",
                    Predecessor = "7",
                },
            })
        },
        new TaskData() {
            TaskId = 9,
            TaskName = "Sign contract",
            StartDate = new DateTime(2020, 04, 04),
            Duration = "1",
            Predecessor = "8",
            Progress = 30,
        },
        new TaskData() {
            TaskId = 10,
            TaskName = "Project approval and kick off",
            StartDate = new DateTime(2020, 04, 04),
            EndDate = new DateTime(2020, 04, 21),
            Duration = "0",
            Predecessor = "9",
        },
        new TaskData() {
            TaskId = 11,
            TaskName = "Site work",
            StartDate = new DateTime(2020, 04, 04),
            EndDate = new DateTime(2020, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 12,
                    TaskName = "Clear the building site",
                    StartDate = new DateTime(2020, 04, 04),
                    Duration = "2",
                    Progress = 30,
                    Predecessor = "9",
                },
                new TaskData() {
                    TaskId = 13,
                    TaskName = "Install temporary power service",
                    StartDate = new DateTime(2020, 04, 04),
                    Duration = "2",
                    Predecessor = "12",
                },
            })
        },
        new TaskData() {
            TaskId = 14,
            TaskName = "Foundation",
            StartDate = new DateTime(2020, 04, 04),
            EndDate = new DateTime(2020, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 15,
                    TaskName = "Excavate for foundations",
                    StartDate = new DateTime(2020, 04, 04),
                    Duration = "3",
                    Progress = 30,
                    Predecessor = "13",
                }
            })
        }
    };
        return Tasks;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
